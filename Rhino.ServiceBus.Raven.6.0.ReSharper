<Configuration>
  <CodeStyleSettings>
    <ExternalPath IsNull="False">
    </ExternalPath>
    <Sharing>SOLUTION</Sharing>
    <CSS>
      <FormatSettings />
      <Naming2 />
    </CSS>
    <CSharp>
      <FormatSettings>
        <ALIGN_MULTILINE_ARGUMENT>False</ALIGN_MULTILINE_ARGUMENT>
        <ALIGN_MULTILINE_ARRAY_AND_OBJECT_INITIALIZER>False</ALIGN_MULTILINE_ARRAY_AND_OBJECT_INITIALIZER>
        <ANONYMOUS_METHOD_DECLARATION_BRACES>NEXT_LINE</ANONYMOUS_METHOD_DECLARATION_BRACES>
        <CASE_BLOCK_BRACES>NEXT_LINE</CASE_BLOCK_BRACES>
        <FORCE_ATTRIBUTE_STYLE>SEPARATE</FORCE_ATTRIBUTE_STYLE>
        <FORCE_FIXED_BRACES_STYLE>ALWAYS_ADD</FORCE_FIXED_BRACES_STYLE>
        <FORCE_FOR_BRACES_STYLE>ALWAYS_ADD</FORCE_FOR_BRACES_STYLE>
        <FORCE_FOREACH_BRACES_STYLE>ALWAYS_ADD</FORCE_FOREACH_BRACES_STYLE>
        <FORCE_IFELSE_BRACES_STYLE>ALWAYS_ADD</FORCE_IFELSE_BRACES_STYLE>
        <FORCE_USING_BRACES_STYLE>ONLY_FOR_MULTILINE</FORCE_USING_BRACES_STYLE>
        <FORCE_WHILE_BRACES_STYLE>ALWAYS_ADD</FORCE_WHILE_BRACES_STYLE>
        <INDENT_ANONYMOUS_METHOD_BLOCK>False</INDENT_ANONYMOUS_METHOD_BLOCK>
        <INDENT_EMBRACED_INITIALIZER_BLOCK>False</INDENT_EMBRACED_INITIALIZER_BLOCK>
        <INITIALIZER_BRACES>NEXT_LINE</INITIALIZER_BRACES>
        <MODIFIERS_ORDER IsNull="False">
          <Item>public</Item>
          <Item>protected</Item>
          <Item>internal</Item>
          <Item>private</Item>
          <Item>new</Item>
          <Item>abstract</Item>
          <Item>virtual</Item>
          <Item>override</Item>
          <Item>sealed</Item>
          <Item>static</Item>
          <Item>readonly</Item>
          <Item>extern</Item>
          <Item>unsafe</Item>
          <Item>volatile</Item>
        </MODIFIERS_ORDER>
        <SPACE_AFTER_TYPECAST_PARENTHESES>False</SPACE_AFTER_TYPECAST_PARENTHESES>
        <SPACE_AROUND_MULTIPLICATIVE_OP>True</SPACE_AROUND_MULTIPLICATIVE_OP>
        <SPACE_BEFORE_SIZEOF_PARENTHESES>False</SPACE_BEFORE_SIZEOF_PARENTHESES>
        <SPACE_BEFORE_TYPEOF_PARENTHESES>False</SPACE_BEFORE_TYPEOF_PARENTHESES>
        <SPACE_WITHIN_SINGLE_LINE_ARRAY_INITIALIZER_BRACES>True</SPACE_WITHIN_SINGLE_LINE_ARRAY_INITIALIZER_BRACES>
        <WRAP_AFTER_DECLARATION_LPAR>True</WRAP_AFTER_DECLARATION_LPAR>
        <WRAP_ARGUMENTS_STYLE>CHOP_IF_LONG</WRAP_ARGUMENTS_STYLE>
        <WRAP_BEFORE_BINARY_OPSIGN>True</WRAP_BEFORE_BINARY_OPSIGN>
        <WRAP_EXTENDS_LIST_STYLE>CHOP_IF_LONG</WRAP_EXTENDS_LIST_STYLE>
        <WRAP_PARAMETERS_STYLE>CHOP_IF_LONG</WRAP_PARAMETERS_STYLE>
      </FormatSettings>
      <UsingsSettings />
      <Naming2>
        <EventHandlerPatternLong>$object$_On$event$</EventHandlerPatternLong>
        <EventHandlerPatternShort>$event$Handler</EventHandlerPatternShort>
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="TypesAndNamespaces" />
        <PredefinedRule Inspect="True" Prefix="I" Suffix="" Style="AaBb" ElementKind="Interfaces" />
        <PredefinedRule Inspect="True" Prefix="T" Suffix="" Style="AaBb" ElementKind="TypeParameters" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="MethodPropertyEvent" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="Locals" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="LocalConstants" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="Parameters" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="PublicFields" />
        <PredefinedRule Inspect="True" Prefix="_" Suffix="" Style="aaBb" ElementKind="PrivateInstanceFields" />
        <PredefinedRule Inspect="True" Prefix="_" Suffix="" Style="aaBb" ElementKind="PrivateStaticFields" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="Constants" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="PrivateConstants" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="StaticReadonly" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="PrivateStaticReadonly" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="EnumMember" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="Other" />
      </Naming2>
      <CustomMemberReorderingPatterns><![CDATA[<?xml version="1.0" encoding="utf-8" ?>

<!--
I. Overall

I.1 Each pattern can have <Match>....</Match> element. For the given type declaration, the pattern with the match, evaluated to 'true' with the largest weight, will be used 
I.2 Each pattern consists of the sequence of <Entry>...</Entry> elements. Type member declarations are distributed between entries
I.3 If pattern has RemoveAllRegions="true" attribute, then all regions will be cleared prior to reordering. Otherwise, only auto-generated regions will be cleared
I.4 The contents of each entry is sorted by given keys (First key is primary,  next key is secondary, etc). Then the declarations are grouped and en-regioned by given property

II. Available match operands

Each operand may have Weight="..." attribute. This weight will be added to the match weight if the operand is evaluated to 'true'.
The default weight is 1

II.1 Boolean functions:
II.1.1 <And>....</And>
II.1.2 <Or>....</Or>
II.1.3 <Not>....</Not>

II.2 Operands
II.2.1 <Kind Is="..."/>. Kinds are: class, struct, interface, enum, delegate, type, constructor, destructor, property, indexer, method, operator, field, constant, event, member
II.2.2 <Name Is="..." [IgnoreCase="true/false"] />. The 'Is' attribute contains regular expression
II.2.3 <HasAttribute CLRName="..." [Inherit="true/false"] />. The 'CLRName' attribute contains regular expression
II.2.4 <Access Is="..."/>. The 'Is' values are: public, protected, internal, protected internal, private
II.2.5 <Static/>
II.2.6 <Abstract/>
II.2.7 <Virtual/>
II.2.8 <Override/>
II.2.9 <Sealed/>
II.2.10 <Readonly/>
II.2.11 <ImplementsInterface CLRName="..."/>. The 'CLRName' attribute contains regular expression
II.2.12 <HandlesEvent />
-->

<Patterns xmlns="urn:shemas-jetbrains-com:member-reordering-patterns">

  <!-- Do not reorder COM interfaces -->
  <Pattern>
    <Match>
      <And Weight="1000">
        <Kind Is="interface"/>
        <HasAttribute CLRName="System.Runtime.InteropServices.InterfaceTypeAttribute" Inherit="true"/>
      </And>
    </Match>
  </Pattern>

  <!-- Do not reorder P/Invoke structs -->
  <Pattern>
    <Match>
      <And Weight="1000">
        <Or>
          <Kind Is="struct"/>
          <Kind Is="class"/>
        </Or>
        <HasAttribute CLRName="System.Runtime.InteropServices.StructLayoutAttribute" Inherit="true"/>
      </And>
    </Match>
  </Pattern>

  <!-- Do not reorder P/Invoke classes (called xxxNativeMethods) -->
  <Pattern>
    <Match>
      <And Weight="1000">
        <Kind Is="class"/>
        <Name Is=".*NativeMethods" />
      </And>
    </Match>
  </Pattern>

  <!-- Special formatting of NUnit test fixture -->
  <Pattern RemoveAllRegions="true">
    <Match>
      <And Weight="1000">
        <Kind Is="class"/>
        <HasAttribute CLRName="NUnit.Framework.TestFixtureAttribute" Inherit="true"/>
      </And>
    </Match>


    <!-- constants -->
    <Entry>
      <Match>
        <Kind Is="constant"/>
      </Match>
      <Sort>
        <Access Order="public protected internal private"/>
        <Name/>
      </Sort>
      <Group Region="Constants">
      </Group>
    </Entry>

    <!-- fields -->
    <Entry>
      <Match>
        <Kind Is="field" Weight="100" />
      </Match>
      <Sort>
        <Static/>
        <Readonly/>
        <Name/>
      </Sort>
      <Group Region="All fields"/>
    </Entry>

    <!-- Constructors/Finalizers. Place static one first -->
    <Entry>
      <Match>
        <Or Weight="100" >
          <Kind Is="constructor"/>
          <Kind Is="destructor"/>
        </Or>
      </Match>
      <Sort>
        <Static/>
        <Kind Order="constructor destructor" />
      </Sort>
      <Group Region="All constructors"/>
    </Entry>
    

    <!-- Setup/Teardown -->
    <Entry>
      <Match>
        <And>
          <Kind Is="method"/>
          <Or>
            <HasAttribute CLRName="NUnit.Framework.SetUpAttribute" Inherit="true"/>
            <HasAttribute CLRName="NUnit.Framework.TearDownAttribute" Inherit="true"/>
            <HasAttribute CLRName="NUnit.Framework.TestFixtureSetUpAttribute" Inherit="true"/>
            <HasAttribute CLRName="NUnit.Framework.TestFixtureTearDownAttribute" Inherit="true"/>
            <HasAttribute CLRName="Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute" Inherit="true"/>
            <HasAttribute CLRName="Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute" Inherit="true"/>
            <HasAttribute CLRName="Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute" Inherit="true"/>
            <HasAttribute CLRName="Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute" Inherit="true"/>
          </Or>
        </And>
      </Match>
      <Group Region="Setup/Teardown"/>
    </Entry>
    
    
    <!--Test methods-->
    <Entry>
      <Match>
        <And Weight="100">
          <Kind Is="method"/>
          <HasAttribute CLRName="NUnit.Framework.TestAttribute" Inherit="false"/>
          <HasAttribute CLRName="Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute" Inherit="true"/>
        </And>
      </Match>
      <Sort>
        <Name/>
      </Sort>
      <Group Region="Test methods">
        <Name Region="${Name}" />
      </Group>
    </Entry>

    <!--All other members-->
    <Entry>
      <Group Region="Other methods">
        <Name Region="${Name}" />
      </Group>
    </Entry>
    
  </Pattern>

  <!-- Default file-level pattern -->
  <Pattern>

    <!-- delegates -->
    <Entry>
      <Match>
        <Kind Is="delegate"/>
      </Match>
      <Sort>
        <Access Order="public internal protected internal protected private" />
        <Name/>
      </Sort>
      <Group Region="Delegates" />
    </Entry>
    
    <!-- enums -->
    <Entry>
      <Match>
        <Kind Is="enum"/>
      </Match>
      <Sort>
        <Access Order="public internal protected internal protected private" />
        <Name/>
      </Sort>
      <Group Region="Enumerations" />
    </Entry>

    <!-- interfaces -->
    <Entry>
      <Match>
        <Kind Is="interface" />
      </Match>
      <Sort>
        <Access Order="public internal protected internal protected private" />
        <Name/>
      </Sort>
      <Group Region="Interfaces" />
    </Entry>
    
    <!-- structs -->
    <Entry>
      <Match>
        <Kind Is="struct" />
      </Match>
      <Sort>
        <Access Order="public internal protected internal protected private" />
        <Name/>
      </Sort>
      <Group Region="Structs" />
    </Entry>

    <!-- classes -->
    <Entry>
      <Match>
        <Kind Is="class" />
      </Match>
      <Sort>
        <Access Order="public internal protected internal protected private" />
        <Name/>
      </Sort>
    </Entry>

    <!--all other members-->
    <Entry/>
    
  </Pattern>
  
  <!-- Class-level pattern -->
  <Pattern>
    <Match>
      <Or Weight="500" >
        <Kind Is="class" />
        <Kind Is="struct" />
        <Kind Is="interface" />
      </Or>
    </Match>
    
    <!-- constants -->
    <Entry>
      <Match>
        <Kind Is="constant" />
      </Match>
      <Sort>
        <Access Order="public internal protected internal protected private"/>
        <Name/>
      </Sort>
    </Entry>

    <!-- fields -->
    <Entry>
      <Match>
        <Kind Is="field" />
      </Match>
      <Sort>
        <Access Order="public internal protected internal protected private"/>
        <Static />
        <Readonly/>
        <Name/>
      </Sort>
    </Entry>

    <!-- Constructors -->
    <Entry>
      <Match>
        <Kind Is="constructor" />
      </Match>
      <Sort>
        <Static/>
        <Access Order="public internal protected internal protected private"/>
      </Sort>
    </Entry>
    
    <!-- Finalizers -->
    <Entry>
      <Match>
        <Kind Is="destructor" />
      </Match>
      <Sort>
        <Static/>
        <Access Order="public internal protected internal protected private"/>
      </Sort>
    </Entry>
    
    <!-- Delegates -->
    <Entry>
      <Match>
        <Kind Is="delegate" />
      </Match>
      <Sort>
        <Access Order="public internal protected internal protected private" />
        <Name/>
      </Sort>
    </Entry>
    
    <!-- Events -->
    <Entry>
      <Match>
        <Kind Is="event" />
      </Match>
      <Sort>
        <Static/>
        <Access Order="public internal protected internal protected private" />
        <Name/>
      </Sort>
    </Entry>

    <!-- enums -->
    <Entry>
      <Match>
        <Kind Is="enum" />
      </Match>
      <Sort>
        <Access Order="public internal protected internal protected private" />
        <Name/>
      </Sort>
    </Entry>

    <!-- interfaces -->
    <Entry>
      <Match>
        <Kind Is="interface" />
      </Match>
      <Sort>
        <Access Order="public internal protected internal protected private" />
        <Name/>
      </Sort>
    </Entry>
    
    <!-- Properties -->
    <Entry>
      <Match>
            <Kind Is="property" />
      </Match>
      <Sort>
        <Static />
        <Access Order="public internal protected internal protected private" />
        <Name/>
      </Sort>
    </Entry>
    
    <!-- Indexers -->
    <Entry>
      <Match>
            <Kind Is="indexer" Weight="90"  />
      </Match>
      <Sort>
        <Static />
        <Access Order="public internal protected internal protected private" />
        <Name/>
      </Sort>
    </Entry>
    
    <!-- ClassInitialize Methods -->
    <Entry>
      <Match>
        <And Weight="200">
          <HasAttribute CLRName="Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute" Inherit="false"/>
          <Kind Is="method" />
        </And>
      </Match>
    </Entry>
    
    <!-- ClassCleanup Methods -->
    <Entry>
      <Match>
        <And Weight="200">
          <HasAttribute CLRName="Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute" Inherit="false"/>
          <Kind Is="method" />
        </And>
      </Match>
    </Entry>
    
    <!-- TestInitialize Methods -->
    <Entry>
      <Match>
        <And Weight="200">
          <HasAttribute CLRName="Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute" Inherit="false"/>
          <Kind Is="method" />
        </And>
      </Match>
    </Entry>
    
    <!-- TestCleanup Methods -->
    <Entry>
      <Match>
        <And Weight="200">
          <HasAttribute CLRName="Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute" Inherit="false"/>
          <Kind Is="method" />
        </And>
      </Match>
    </Entry>
    
    <!-- Other Methods -->
    <Entry>
      <Match>
        <Kind Is="method" />
      </Match>
      <Sort>
        <Access Order="public internal protected internal protected private" />
        <Static />
        <Name/>
      </Sort>
    </Entry>
    
    <!-- Event handlers -->
    <!-- <Entry>
      <Match>
        <HandlesEvent Weight="90" />
      </Match>
      <Sort>
        <Static />
        <Access Order="public internal protected internal protected private" />
        <Override/>
        <Name/>
      </Sort>
    </Entry> -->

    <!--Nested structs -->
    <Entry>
      <Match>
        <Kind Is="struct" Weight="100" />
      </Match>
      <Sort>
        <Static />
        <Access Order="public internal protected internal protected private" />
        <Name/>
      </Sort>
    </Entry>
    
    <!--Nested classes -->
    <Entry>
      <Match>
        <Kind Is="class" Weight="100" />
      </Match>
      <Sort>
        <Static />
        <Access Order="public internal protected internal protected private" />
        <Name/>
      </Sort>
    </Entry>
    
    <!-- Anything else -->
    <Entry />
    
  </Pattern>

  
</Patterns>
]]></CustomMemberReorderingPatterns>
    </CSharp>
    <HTML>
      <FormatSettings />
    </HTML>
    <JavaScript>
      <FormatSettings />
      <Naming2>
        <UserRule Name="JS_LOCAL_VARIABLE" Inspect="True" Prefix="" Suffix="" Style="aaBb" />
        <UserRule Name="JS_FUNCTION" Inspect="True" Prefix="" Suffix="" Style="aaBb" />
        <UserRule Name="JS_PARAMETER" Inspect="True" Prefix="" Suffix="" Style="aaBb" />
        <UserRule Name="JS_LABEL" Inspect="True" Prefix="" Suffix="" Style="aaBb" />
        <UserRule Name="JS_GLOBAL_VARIABLE" Inspect="True" Prefix="" Suffix="" Style="AaBb" />
        <UserRule Name="JS_OBJECT_PROPERTY_OF_FUNCTION" Inspect="True" Prefix="" Suffix="" Style="aaBb" />
        <UserRule Name="JS_CONSTRUCTOR" Inspect="True" Prefix="" Suffix="" Style="AaBb" />
      </Naming2>
    </JavaScript>
    <VB>
      <FormatSettings>
        <WRAP_LIMIT>100</WRAP_LIMIT>
        <WRAP_PARAMETERS_STYLE>CHOP_IF_LONG</WRAP_PARAMETERS_STYLE>
      </FormatSettings>
      <ImportsSettings />
      <Naming2>
        <EventHandlerPatternLong>$object$_On$event$</EventHandlerPatternLong>
        <EventHandlerPatternShort>$event$Handler</EventHandlerPatternShort>
      </Naming2>
    </VB>
    <Web>
      <Naming2 />
    </Web>
    <XML>
      <FormatSettings>
        <ProcessingInstructionAttributesFormat>DoNotTouch</ProcessingInstructionAttributesFormat>
      </FormatSettings>
    </XML>
    <Xaml>
      <Naming2>
        <UserRule Name="XAML_FIELD" Inspect="True" Prefix="" Suffix="" Style="aaBb" />
        <UserRule Name="NAMESPACE_ALIAS" Inspect="True" Prefix="" Suffix="" Style="aaBb" />
        <UserRule Name="XAML_RESOURCE" Inspect="True" Prefix="" Suffix="" Style="aaBb" />
      </Naming2>
    </Xaml>
    <GenerateMemberBody />
    <Naming2>
      <EventHandlerPatternLong>$object$_On$event$</EventHandlerPatternLong>
      <EventHandlerPatternShort>$event$Handler</EventHandlerPatternShort>
      <PredefinedRule Inspect="True" Prefix="my" Suffix="" Style="AaBb" ElementKind="PrivateInstanceFields" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="TypesAndNamespaces" />
      <PredefinedRule Inspect="True" Prefix="I" Suffix="" Style="AaBb" ElementKind="Interfaces" />
      <PredefinedRule Inspect="True" Prefix="T" Suffix="" Style="AaBb" ElementKind="TypeParameters" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="MethodPropertyEvent" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="Locals" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="LocalConstants" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="Parameters" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="PublicFields" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="PrivateStaticFields" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="Constants" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="PrivateConstants" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="StaticReadonly" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="PrivateStaticReadonly" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="EnumMember" />
      <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="Other" />
      <Abbreviation Text="TL" />
      <Abbreviation Text="MA" />
      <Abbreviation Text="QA" />
    </Naming2>
  </CodeStyleSettings>
</Configuration>